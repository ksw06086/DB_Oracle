SELECT * FROM CUSTOMER;

-- BOOK 테이블에 새로운 도서 '스포츠 의학'을 삽입하십시오.
-- 스포츠 의학은 한솔의학서적에서 출간했으며 가격은 90,000이다.
INSERT INTO BOOK
VALUES (11, '스포츠 의학', '한솔의학서적', 90000);
-- BOOK 테이블에 새로운 도서 '스포츠 의학'을 삽입하십시오.
-- 스포츠 의학은 한솔의학서적에서 출간했으면 가격은 미정이다.
INSERT INTO BOOK(BOOK_ID, BOOK_NAME, publisher)
VALUES (14, '스포츠 의학', '한솔의학서적');
-- 수입도서 목록(IMPORT_BOOK)을 BOOK테이블에 모두 삽입하시오.
INSERT INTO BOOK
SELECT * FROM import_book;
-- CUSTOMER 테이블에서 고객번호가 5인 고객의 주소를 '대한민국 부산'으로 변경하시오.
UPDATE CUSTOMER
SET ADDRESS = '대한민국 부산'
WHERE C_ID = 5;
-- CUSTOMER 테이블에서 이민지 고객의 주소를 이지은 고객의 주소로 변경하시오
UPDATE CUSTOMER
SET ADDRESS = (SELECT ADDRESS FROM CUSTOMER WHERE C_NAME = '이지은')
WHERE C_NAME = '이민지';
-- CUSTOMER 테이블에서 고객번호가 5인 고객을 삭제하시오
DELETE CUSTOMER
WHERE C_ID = 5;
-- 모든 고객을 삭제하시오
DELETE CUSTOMER;

-- -78과 +78의 절대값을 구하시오
SELECT ABS(-78), ABS(+78) FROM DUAL;

-- 4.875를 소수 첫째 자리까지 반올림한 값을 구하시오.
SELECT ROUND(4.875, 1) FROM DUAL;

-- 고객별 평균 주문 금액을 백 원 단위로 반올림 한 값을 구하시오.
SELECT C_ID, ROUND(AVG(SALE_PRICE), -2)
FROM ORDERS
GROUP BY C_ID;

-- 도서 제목에 야구가 포함된 도서를 농구로 변경한 후 도서 목록을 보이시오.
SELECT 
    BOOK_ID, REPLACE(BOOK_NAME, '야구', '농구'), PRICE, PUBLISHER
FROM BOOK;

-- 굿스포츠에서 출판한 도서의 제목과 제목의 글자 수를 확인하시오.
-- (한글은 2바이트 혹은 UNICODE 경우는 3바이트를 차지함)
SELECT 
    BOOK_NAME, LENGTH(BOOK_NAME), LENGTHB(BOOK_NAME)
FROM BOOK;

-- 마당서점의 고객 중에서 같은 성을 가진 사람이 몇 명이나 되는지 성별 인원 수를 구하시오.
SELECT
    SUBSTR(C_NAME, 1, 1), COUNT(*)
FROM CUSTOMER
GROUP BY SUBSTR(C_NAME, 1, 1);

-- 마당 서점은 주문일로부터 10일 후 매출을 확정한다. 각 주문의 확정일자를 구하시오.
SELECT
    ORDER_DATE 주문일, ORDER_DATE + 10 확정일자
FROM ORDERS;

-- 마당 서점이 2014년 7월 7일에 주문받은 도서의 주문번호, 주문일, 고객번호, 
-- 도서번호를 모두 보이시오. 단 주문일은 'YYYY-MM-DD 요일' 형태로 표시한다.
SELECT
    ORDER_ID, TO_CHAR(ORDER_DATE, 'YYYY-MM-DD DY')
FROM ORDERS;

-- DBMS 서버에 설정된 현재 시간과 오늘 날짜를 확인하시오.
SELECT
    TO_CHAR(SYSDATE, 'HH:MM:SS'), TO_CHAR(SYSDATE, 'YYYY-MM-DD DY')
FROM DUAL;

-- 이름, 전화번호가 포함된 고객 목록을 보이시오. 단, 전화번호가 없는 고객은
-- '연락처없음'으로 표시한다.
SELECT
    C_NAME, NVL(PHONE, '연락처 없음')
FROM CUSTOMER;

-- 고객 목록에서 고객번호, 이름, 전화번호를 앞의 두 명만 보이시오.
SELECT C_ID, C_NAME, PHONE
FROM CUSTOMER
WHERE ROWNUM <= 2;

-- 마당 서점의 고객별 판매액을 보이시오(결과는 고객이름과 고객별 판매액을 출력)
SELECT 
    (SELECT C_NAME FROM CUSTOMER WHERE CUSTOMER.C_ID = ORDERS.C_ID) 고객이름,
    SUM(SALE_PRICE)
FROM ORDERS
GROUP BY C_ID;

-- ORDERS 테이블에 각 주문에 맞는 도서 이름을 입력하시오.
ALTER TABLE ORDERS
ADD BOOK_NAME VARCHAR2(40);
UPDATE ORDERS
SET BOOK_NAME = (SELECT BOOK_NAME FROM BOOK WHERE BOOK.BOOK_ID = ORDERS.BOOK_ID);

-- 고객번호가 2 이하인 고객의 판매액을 보이시오(결과는 고객이름과 고객별 판매액 출력)
select (select c.c_name from customer c where c.c_id = o.c_id) 고객이름,
        sum(o.sale_price)
from orders o
where o.c_id <= 2
group by c_id;

-- 평균 주문 금액 이하의 주문에 대해서 주문번호와 금액을 보이시오.
select
    order_id, sale_price
from orders
where sale_price <= (select avg(sale_price) from orders);

-- 각 고객의 평균 주문 금액보다 큰 금액의 주문 내역에 대해서 주문번호, 고객번호, 금액을 보이시오.
select
    ORDER_ID, C_ID, SALE_PRICE
FROM ORDERS
WHERE SALE_PRICE > (SELECT AVG(SALE_PRICE) FROM ORDERS);

-- 대한민국에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
SELECT
    SUM(SALE_PRICE)
FROM ORDERS, CUSTOMER
WHERE ORDERS.C_ID = CUSTOMER.C_ID
AND CUSTOMER.ADDRESS LIKE '%대한민국%';

-- 3번 고객이 주문한 도서의 최고 금액보다 더 비싼 도서를 구입한 주문의 주문번호와 금액을 보이시오.
SELECT
    ORDER_ID, SALE_PRICE
FROM ORDERS
WHERE SALE_PRICE > ALL(SELECT SALE_PRICE FROM ORDERS WHERE C_ID = 3);

-- EXISTS 연산자로 대한민국에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
SELECT
    SUM(SALE_PRICE)
FROM ORDERS
WHERE EXISTS (SELECT * FROM CUSTOMER WHERE CUSTOMER.ADDRESS LIKE '%대한민국%'
                                    AND CUSTOMER.C_ID = ORDERS.C_ID);

-- 주소에 '대한민국'을 포함하는 고객들로 구성된 뷰를 만들고 조회하시오.
-- 단, 뷰의 이름은 VW_COSTOMER로 한다.
CREATE VIEW VW_CUSTOMER
AS SELECT
    *
FROM CUSTOMER
WHERE ADDRESS LIKE '%대한민국%';

SELECT * FROM VW_CUSTOMER;

-- ORDERS 테이블에 고객이름과 도서 이름을 바로 확인할 수 잇는 뷰를 생성한 후,
-- '이지은' 고객이 구입한 도서의 주문번호, 도서이름, 주문액을 보이시오.
CREATE VIEW VW_ORDERS
AS SELECT
    O.BOOK_ID, O.C_ID, O.ORDER_DATE, O.ORDER_ID, O.SALE_PRICE, C.C_NAME, B.BOOK_NAME
FROM CUSTOMER C, ORDERS O, BOOK B
WHERE C.C_ID = O.C_ID
AND O.BOOK_ID = B.BOOK_ID;
SELECT ORDER_ID, BOOK_NAME, SALE_PRICE
FROM VW_ORDERS
WHERE C_NAME = '이지은';

-- 아까 만든 뷰 VW_CUSTOMER는 주소가 대한민국인 고객을 보여준다.
-- 이 뷰를 영국을 주소로 가진 고객으로 변경하시오. PHONE 속성은 필요 없으므로 포함시키지 마시오.
CREATE OR REPLACE VIEW VW_CUSTOMER
AS SELECT
*
FROM CUSTOMER
WHERE ADDRESS LIKE '%영국%';

-- 앞서 생성한 뷰 VW_CUSTOMER를 삭제하시오.
DROP VIEW VW_CUSTOMER;

-- BOOK 테이블의 BOOKNAME 열을 대상으로 비 클러스터 인덱스 IX_BOOK을 생성하라.
CREATE INDEX IX_BOOK
ON BOOK(BOOK_NAME);

-- BOOK 테이블의 PUBLISHER, PRICE 열을 대상으로 인덱스 IX_BOOK2를 생성하시오.
CREATE INDEX IX_BOOK2
ON BOOK(PUBLISHER, PRICE);

-- 인덱스 IX_BOOK을 재생성하시오.
ALTER INDEX IX_BOOK REBUILD;

-- 인덱스 IX_BOOK을 삭제하시오.
DROP INDEX IX_BOOK;